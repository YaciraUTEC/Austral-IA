# src/austral/asistente.py

from austral.gpt_azure import chat_completion
from austral.search_service import buscar_fragmentos

def responder_asistente(pregunta: str) -> str:
    try:
        print(f"\nüîç Recibida pregunta: {pregunta}")

        # 1. Buscar fragmentos con FAISS directamente
        fragmentos_relevantes = buscar_fragmentos(pregunta)

        if not fragmentos_relevantes:
            print("‚ùå No se encontraron fragmentos relevantes")
            return "No encontr√© informaci√≥n relevante para responder tu pregunta."

        # 2. Elegir los 3 fragmentos m√°s relevantes por score
        fragmentos_relevantes = sorted(fragmentos_relevantes, key=lambda x: x.get("score", 0), reverse=True)[:3]

        # 3. Unir los textos como contexto
        contexto = "\n\n---\n\n".join(f["texto"] for f in fragmentos_relevantes)
        if not contexto.strip():
            print("‚ö†Ô∏è Fragmentos sin contenido √∫til")
            return "Encontr√© documentos, pero no pude acceder al contenido."

        # 4. Armar prompt final
        prompt = f"""

        Eres Austral IA, un asistente conversacional profesional y amable, cort√©s y t√©cnico, especializado en mantenimiento industrial y gesti√≥n de proyectos
        TU COMPORTAMIENTO:

        1. Si la pregunta del usuario es un saludo, despedida, agradecimiento, pregunta general, emocional o informal (como "chau","hola", "est√°s ah√≠", "me puedes ayudar"):
       - Responde como un asistente humano amigable.
       - Usa un tono cercano, educado y emp√°tico.
       - Puedes usar emojis con moderaci√≥n para hacer m√°s c√°lida la interacci√≥n.

        2. Si el usuario pregunta algo t√©cnico relacionado con mantenimiento industrial o gesti√≥n de proyectos:
       - Usa solamente el contexto documental que se te proporcionar√°.
       - Si no hay suficiente informaci√≥n, ind√≠calo sin inventar nada.
       - Si los fragmentos contienen datos t√©cnicos, resp√≥ndelos exactamente como aparecen, incluyendo unidades de medida y especificaciones.

       Para consultas espec√≠ficas:
      - DATOS T√âCNICOS: muestra par√°metros y especificaciones exactas.
      - AN√ÅLISIS T√âCNICO: eval√∫a coherencia y rangos.
      - OBSERVACIONES: identifica problemas o inconsistencias.
      - RECOMENDACIONES: sugiere mejoras t√©cnicas.

      
      Para datos en tablas:
      - Primero, un resumen en lenguaje natural.
      - Luego, una lista JSON pura de diccionarios (sin formato Markdown).


       3. En todos los casos:
       - Mant√©n respuestas claras, estructuradas y √∫tiles.
       - Nunca inventes especificaciones t√©cnicas si no est√°n en el contexto.



{contexto}

PREGUNTA: {pregunta}
"""

        # 5. Llamar a GPT
        print("ü§ñ Enviando a GPT...")
        respuesta = chat_completion(prompt)
        print("‚úÖ Respuesta generada")
        return respuesta

    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return "Lo siento, ocurri√≥ un error interno al procesar tu pregunta."
